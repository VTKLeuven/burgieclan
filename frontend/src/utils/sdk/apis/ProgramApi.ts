/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiProgramsGetCollection200Response,
  Program,
  ProgramJsonld,
} from '../models';
import {
    ApiProgramsGetCollection200ResponseFromJSON,
    ApiProgramsGetCollection200ResponseToJSON,
    ProgramFromJSON,
    ProgramToJSON,
    ProgramJsonldFromJSON,
    ProgramJsonldToJSON,
} from '../models';

export interface ApiProgramsGetCollectionRequest {
    page?: any;
    name?: any;
}

export interface ApiProgramsIdGetRequest {
    id: any;
}

/**
 * 
 */
export class ProgramApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Program resources.
     * Retrieves the collection of Program resources.
     */
    async apiProgramsGetCollectionRaw(requestParameters: ApiProgramsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiProgramsGetCollection200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/programs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiProgramsGetCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the collection of Program resources.
     * Retrieves the collection of Program resources.
     */
    async apiProgramsGetCollection(requestParameters: ApiProgramsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiProgramsGetCollection200Response> {
        const response = await this.apiProgramsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a Program resource.
     * Retrieves a Program resource.
     */
    async apiProgramsIdGetRaw(requestParameters: ApiProgramsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProgramJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiProgramsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/programs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProgramJsonldFromJSON(jsonValue));
    }

    /**
     * Retrieves a Program resource.
     * Retrieves a Program resource.
     */
    async apiProgramsIdGet(requestParameters: ApiProgramsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProgramJsonld> {
        const response = await this.apiProgramsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
