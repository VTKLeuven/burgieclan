/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnnouncementJsonld,
  ApiAnnouncementsGetCollection200Response,
} from '../models';
import {
    AnnouncementJsonldFromJSON,
    ApiAnnouncementsGetCollection200ResponseFromJSON,
} from '../models';

export interface ApiAnnouncementsGetCollectionRequest {
    page?: any;
    title?: any;
    content?: any;
    startTimeBefore?: any;
    startTimeStrictlyBefore?: any;
    startTimeAfter?: any;
    startTimeStrictlyAfter?: any;
    endTimeBefore?: any;
    endTimeStrictlyBefore?: any;
    endTimeAfter?: any;
    endTimeStrictlyAfter?: any;
}

export interface ApiAnnouncementsIdGetRequest {
    id: any;
}

/**
 * 
 */
export class AnnouncementApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Announcement resources.
     * Retrieves the collection of Announcement resources.
     */
    async apiAnnouncementsGetCollectionRaw(requestParameters: ApiAnnouncementsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiAnnouncementsGetCollection200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.startTimeBefore !== undefined) {
            queryParameters['startTime[before]'] = requestParameters.startTimeBefore;
        }

        if (requestParameters.startTimeStrictlyBefore !== undefined) {
            queryParameters['startTime[strictly_before]'] = requestParameters.startTimeStrictlyBefore;
        }

        if (requestParameters.startTimeAfter !== undefined) {
            queryParameters['startTime[after]'] = requestParameters.startTimeAfter;
        }

        if (requestParameters.startTimeStrictlyAfter !== undefined) {
            queryParameters['startTime[strictly_after]'] = requestParameters.startTimeStrictlyAfter;
        }

        if (requestParameters.endTimeBefore !== undefined) {
            queryParameters['endTime[before]'] = requestParameters.endTimeBefore;
        }

        if (requestParameters.endTimeStrictlyBefore !== undefined) {
            queryParameters['endTime[strictly_before]'] = requestParameters.endTimeStrictlyBefore;
        }

        if (requestParameters.endTimeAfter !== undefined) {
            queryParameters['endTime[after]'] = requestParameters.endTimeAfter;
        }

        if (requestParameters.endTimeStrictlyAfter !== undefined) {
            queryParameters['endTime[strictly_after]'] = requestParameters.endTimeStrictlyAfter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/announcements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiAnnouncementsGetCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the collection of Announcement resources.
     * Retrieves the collection of Announcement resources.
     */
    async apiAnnouncementsGetCollection(requestParameters: ApiAnnouncementsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiAnnouncementsGetCollection200Response> {
        const response = await this.apiAnnouncementsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a Announcement resource.
     * Retrieves a Announcement resource.
     */
    async apiAnnouncementsIdGetRaw(requestParameters: ApiAnnouncementsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnnouncementJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAnnouncementsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/announcements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnnouncementJsonldFromJSON(jsonValue));
    }

    /**
     * Retrieves a Announcement resource.
     * Retrieves a Announcement resource.
     */
    async apiAnnouncementsIdGet(requestParameters: ApiAnnouncementsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnnouncementJsonld> {
        const response = await this.apiAnnouncementsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
