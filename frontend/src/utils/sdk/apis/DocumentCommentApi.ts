/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocumentCommentsGetCollection200Response,
  DocumentComment,
  DocumentCommentJsonld,
} from '../models';
import {
    ApiDocumentCommentsGetCollection200ResponseFromJSON,
    ApiDocumentCommentsGetCollection200ResponseToJSON,
    DocumentCommentFromJSON,
    DocumentCommentToJSON,
    DocumentCommentJsonldFromJSON,
    DocumentCommentJsonldToJSON,
} from '../models';

export interface ApiDocumentCommentsGetCollectionRequest {
    page?: any;
    document?: any;
    document2?: any;
    content?: any;
    creator?: any;
    creator2?: any;
    anonymous?: any;
}

export interface ApiDocumentCommentsIdDeleteRequest {
    id: any;
}

export interface ApiDocumentCommentsIdGetRequest {
    id: any;
}

export interface ApiDocumentCommentsIdPatchRequest {
    id: any;
    documentComment: DocumentComment;
}

export interface ApiDocumentCommentsPostRequest {
    documentCommentJsonld: DocumentCommentJsonld;
}

/**
 * 
 */
export class DocumentCommentApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Document Comment resources.
     * Retrieves the collection of Document Comment resources.
     */
    async apiDocumentCommentsGetCollectionRaw(requestParameters: ApiDocumentCommentsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentCommentsGetCollection200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.document !== undefined) {
            queryParameters['document'] = requestParameters.document;
        }

        if (requestParameters.document2 !== undefined) {
            queryParameters['document[]'] = requestParameters.document2;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.creator !== undefined) {
            queryParameters['creator'] = requestParameters.creator;
        }

        if (requestParameters.creator2 !== undefined) {
            queryParameters['creator[]'] = requestParameters.creator2;
        }

        if (requestParameters.anonymous !== undefined) {
            queryParameters['anonymous'] = requestParameters.anonymous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/document_comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiDocumentCommentsGetCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the collection of Document Comment resources.
     * Retrieves the collection of Document Comment resources.
     */
    async apiDocumentCommentsGetCollection(requestParameters: ApiDocumentCommentsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentCommentsGetCollection200Response> {
        const response = await this.apiDocumentCommentsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the Document Comment resource.
     * Removes the Document Comment resource.
     */
    async apiDocumentCommentsIdDeleteRaw(requestParameters: ApiDocumentCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentCommentsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/document_comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the Document Comment resource.
     * Removes the Document Comment resource.
     */
    async apiDocumentCommentsIdDelete(requestParameters: ApiDocumentCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDocumentCommentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a Document Comment resource.
     * Retrieves a Document Comment resource.
     */
    async apiDocumentCommentsIdGetRaw(requestParameters: ApiDocumentCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCommentJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentCommentsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/document_comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentCommentJsonldFromJSON(jsonValue));
    }

    /**
     * Retrieves a Document Comment resource.
     * Retrieves a Document Comment resource.
     */
    async apiDocumentCommentsIdGet(requestParameters: ApiDocumentCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCommentJsonld> {
        const response = await this.apiDocumentCommentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Document Comment resource.
     * Updates the Document Comment resource.
     */
    async apiDocumentCommentsIdPatchRaw(requestParameters: ApiDocumentCommentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCommentJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentCommentsIdPatch.');
        }

        if (requestParameters.documentComment === null || requestParameters.documentComment === undefined) {
            throw new runtime.RequiredError('documentComment','Required parameter requestParameters.documentComment was null or undefined when calling apiDocumentCommentsIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/merge-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/document_comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentCommentToJSON(requestParameters.documentComment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentCommentJsonldFromJSON(jsonValue));
    }

    /**
     * Updates the Document Comment resource.
     * Updates the Document Comment resource.
     */
    async apiDocumentCommentsIdPatch(requestParameters: ApiDocumentCommentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCommentJsonld> {
        const response = await this.apiDocumentCommentsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Document Comment resource.
     * Creates a Document Comment resource.
     */
    async apiDocumentCommentsPostRaw(requestParameters: ApiDocumentCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCommentJsonld>> {
        if (requestParameters.documentCommentJsonld === null || requestParameters.documentCommentJsonld === undefined) {
            throw new runtime.RequiredError('documentCommentJsonld','Required parameter requestParameters.documentCommentJsonld was null or undefined when calling apiDocumentCommentsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/ld+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/document_comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentCommentJsonldToJSON(requestParameters.documentCommentJsonld),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentCommentJsonldFromJSON(jsonValue));
    }

    /**
     * Creates a Document Comment resource.
     * Creates a Document Comment resource.
     */
    async apiDocumentCommentsPost(requestParameters: ApiDocumentCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCommentJsonld> {
        const response = await this.apiDocumentCommentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
