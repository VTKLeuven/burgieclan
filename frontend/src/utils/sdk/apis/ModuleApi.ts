/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiModulesGetCollection200Response,
  Module,
  ModuleJsonld,
} from '../models';
import {
    ApiModulesGetCollection200ResponseFromJSON,
    ApiModulesGetCollection200ResponseToJSON,
    ModuleFromJSON,
    ModuleToJSON,
    ModuleJsonldFromJSON,
    ModuleJsonldToJSON,
} from '../models';

export interface ApiModulesGetCollectionRequest {
    page?: any;
    name?: any;
}

export interface ApiModulesIdGetRequest {
    id: any;
}

/**
 * 
 */
export class ModuleApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Module resources.
     * Retrieves the collection of Module resources.
     */
    async apiModulesGetCollectionRaw(requestParameters: ApiModulesGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiModulesGetCollection200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/modules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiModulesGetCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the collection of Module resources.
     * Retrieves the collection of Module resources.
     */
    async apiModulesGetCollection(requestParameters: ApiModulesGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiModulesGetCollection200Response> {
        const response = await this.apiModulesGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a Module resource.
     * Retrieves a Module resource.
     */
    async apiModulesIdGetRaw(requestParameters: ApiModulesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModuleJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiModulesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/modules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleJsonldFromJSON(jsonValue));
    }

    /**
     * Retrieves a Module resource.
     * Retrieves a Module resource.
     */
    async apiModulesIdGet(requestParameters: ApiModulesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModuleJsonld> {
        const response = await this.apiModulesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
