/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDocumentsGetCollection200Response,
  DocumentJsonld,
} from '../models';
import {
    ApiDocumentsGetCollection200ResponseFromJSON,
    ApiDocumentsGetCollection200ResponseToJSON,
    DocumentJsonldFromJSON,
    DocumentJsonldToJSON,
} from '../models';

export interface ApiDocumentsGetCollectionRequest {
    page?: any;
    name?: any;
    course?: any;
    course2?: any;
    category?: any;
    category2?: any;
    creator?: any;
    creator2?: any;
    underReview?: any;
}

export interface ApiDocumentsIdGetRequest {
    id: any;
}

export interface ApiDocumentsPostRequest {
    name?: any | null;
    course?: any | null;
    category?: any | null;
    file?: any | null;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Document resources.
     * Retrieves the collection of Document resources.
     */
    async apiDocumentsGetCollectionRaw(requestParameters: ApiDocumentsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentsGetCollection200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.course !== undefined) {
            queryParameters['course'] = requestParameters.course;
        }

        if (requestParameters.course2 !== undefined) {
            queryParameters['course[]'] = requestParameters.course2;
        }

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.category2 !== undefined) {
            queryParameters['category[]'] = requestParameters.category2;
        }

        if (requestParameters.creator !== undefined) {
            queryParameters['creator'] = requestParameters.creator;
        }

        if (requestParameters.creator2 !== undefined) {
            queryParameters['creator[]'] = requestParameters.creator2;
        }

        if (requestParameters.underReview !== undefined) {
            queryParameters['under_review'] = requestParameters.underReview;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiDocumentsGetCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the collection of Document resources.
     * Retrieves the collection of Document resources.
     */
    async apiDocumentsGetCollection(requestParameters: ApiDocumentsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentsGetCollection200Response> {
        const response = await this.apiDocumentsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a Document resource.
     * Retrieves a Document resource.
     */
    async apiDocumentsIdGetRaw(requestParameters: ApiDocumentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDocumentsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentJsonldFromJSON(jsonValue));
    }

    /**
     * Retrieves a Document resource.
     * Retrieves a Document resource.
     */
    async apiDocumentsIdGet(requestParameters: ApiDocumentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentJsonld> {
        const response = await this.apiDocumentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Document resource.
     * Creates a Document resource.
     */
    async apiDocumentsPostRaw(requestParameters: ApiDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentJsonld>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', new Blob([JSON.stringify(anyToJSON(requestParameters.name))], { type: "application/json", }));
                    }

        if (requestParameters.course !== undefined) {
            formParams.append('course', new Blob([JSON.stringify(anyToJSON(requestParameters.course))], { type: "application/json", }));
                    }

        if (requestParameters.category !== undefined) {
            formParams.append('category', new Blob([JSON.stringify(anyToJSON(requestParameters.category))], { type: "application/json", }));
                    }

        if (requestParameters.file !== undefined) {
            formParams.append('file', new Blob([JSON.stringify(anyToJSON(requestParameters.file))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/api/documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentJsonldFromJSON(jsonValue));
    }

    /**
     * Creates a Document resource.
     * Creates a Document resource.
     */
    async apiDocumentsPost(requestParameters: ApiDocumentsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentJsonld> {
        const response = await this.apiDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
