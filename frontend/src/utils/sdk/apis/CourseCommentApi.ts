/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiCourseCommentsGetCollection200Response,
  CourseComment,
  CourseCommentJsonld,
} from '../models';
import {
    ApiCourseCommentsGetCollection200ResponseFromJSON,
    ApiCourseCommentsGetCollection200ResponseToJSON,
    CourseCommentFromJSON,
    CourseCommentToJSON,
    CourseCommentJsonldFromJSON,
    CourseCommentJsonldToJSON,
} from '../models';

export interface ApiCourseCommentsGetCollectionRequest {
    page?: any;
    content?: any;
    creator?: any;
    creator2?: any;
    anonymous?: any;
}

export interface ApiCourseCommentsIdDeleteRequest {
    id: any;
}

export interface ApiCourseCommentsIdGetRequest {
    id: any;
}

export interface ApiCourseCommentsIdPatchRequest {
    id: any;
    courseComment: CourseComment;
}

export interface ApiCourseCommentsPostRequest {
    courseCommentJsonld: CourseCommentJsonld;
}

/**
 * 
 */
export class CourseCommentApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Course Comment resources.
     * Retrieves the collection of Course Comment resources.
     */
    async apiCourseCommentsGetCollectionRaw(requestParameters: ApiCourseCommentsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiCourseCommentsGetCollection200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.creator !== undefined) {
            queryParameters['creator'] = requestParameters.creator;
        }

        if (requestParameters.creator2 !== undefined) {
            queryParameters['creator[]'] = requestParameters.creator2;
        }

        if (requestParameters.anonymous !== undefined) {
            queryParameters['anonymous'] = requestParameters.anonymous;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/course_comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiCourseCommentsGetCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the collection of Course Comment resources.
     * Retrieves the collection of Course Comment resources.
     */
    async apiCourseCommentsGetCollection(requestParameters: ApiCourseCommentsGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiCourseCommentsGetCollection200Response> {
        const response = await this.apiCourseCommentsGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the Course Comment resource.
     * Removes the Course Comment resource.
     */
    async apiCourseCommentsIdDeleteRaw(requestParameters: ApiCourseCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCourseCommentsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/course_comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the Course Comment resource.
     * Removes the Course Comment resource.
     */
    async apiCourseCommentsIdDelete(requestParameters: ApiCourseCommentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCourseCommentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a Course Comment resource.
     * Retrieves a Course Comment resource.
     */
    async apiCourseCommentsIdGetRaw(requestParameters: ApiCourseCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseCommentJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCourseCommentsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/course_comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseCommentJsonldFromJSON(jsonValue));
    }

    /**
     * Retrieves a Course Comment resource.
     * Retrieves a Course Comment resource.
     */
    async apiCourseCommentsIdGet(requestParameters: ApiCourseCommentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseCommentJsonld> {
        const response = await this.apiCourseCommentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Course Comment resource.
     * Updates the Course Comment resource.
     */
    async apiCourseCommentsIdPatchRaw(requestParameters: ApiCourseCommentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseCommentJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCourseCommentsIdPatch.');
        }

        if (requestParameters.courseComment === null || requestParameters.courseComment === undefined) {
            throw new runtime.RequiredError('courseComment','Required parameter requestParameters.courseComment was null or undefined when calling apiCourseCommentsIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/merge-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/course_comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CourseCommentToJSON(requestParameters.courseComment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseCommentJsonldFromJSON(jsonValue));
    }

    /**
     * Updates the Course Comment resource.
     * Updates the Course Comment resource.
     */
    async apiCourseCommentsIdPatch(requestParameters: ApiCourseCommentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseCommentJsonld> {
        const response = await this.apiCourseCommentsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Course Comment resource.
     * Creates a Course Comment resource.
     */
    async apiCourseCommentsPostRaw(requestParameters: ApiCourseCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseCommentJsonld>> {
        if (requestParameters.courseCommentJsonld === null || requestParameters.courseCommentJsonld === undefined) {
            throw new runtime.RequiredError('courseCommentJsonld','Required parameter requestParameters.courseCommentJsonld was null or undefined when calling apiCourseCommentsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/ld+json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/course_comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseCommentJsonldToJSON(requestParameters.courseCommentJsonld),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseCommentJsonldFromJSON(jsonValue));
    }

    /**
     * Creates a Course Comment resource.
     * Creates a Course Comment resource.
     */
    async apiCourseCommentsPost(requestParameters: ApiCourseCommentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseCommentJsonld> {
        const response = await this.apiCourseCommentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
