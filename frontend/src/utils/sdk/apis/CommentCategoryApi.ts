/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiCommentCategoriesGetCollection200Response,
  CommentCategory,
  CommentCategoryJsonld,
} from '../models';
import {
    ApiCommentCategoriesGetCollection200ResponseFromJSON,
    ApiCommentCategoriesGetCollection200ResponseToJSON,
    CommentCategoryFromJSON,
    CommentCategoryToJSON,
    CommentCategoryJsonldFromJSON,
    CommentCategoryJsonldToJSON,
} from '../models';

export interface ApiCommentCategoriesGetCollectionRequest {
    page?: any;
    name?: any;
    description?: any;
}

export interface ApiCommentCategoriesIdGetRequest {
    id: any;
}

/**
 * 
 */
export class CommentCategoryApi extends runtime.BaseAPI {

    /**
     * Retrieves the collection of Comment Category resources.
     * Retrieves the collection of Comment Category resources.
     */
    async apiCommentCategoriesGetCollectionRaw(requestParameters: ApiCommentCategoriesGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiCommentCategoriesGetCollection200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comment_categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiCommentCategoriesGetCollection200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the collection of Comment Category resources.
     * Retrieves the collection of Comment Category resources.
     */
    async apiCommentCategoriesGetCollection(requestParameters: ApiCommentCategoriesGetCollectionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiCommentCategoriesGetCollection200Response> {
        const response = await this.apiCommentCategoriesGetCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a Comment Category resource.
     * Retrieves a Comment Category resource.
     */
    async apiCommentCategoriesIdGetRaw(requestParameters: ApiCommentCategoriesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentCategoryJsonld>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCommentCategoriesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comment_categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentCategoryJsonldFromJSON(jsonValue));
    }

    /**
     * Retrieves a Comment Category resource.
     * Retrieves a Comment Category resource.
     */
    async apiCommentCategoriesIdGet(requestParameters: ApiCommentCategoriesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentCategoryJsonld> {
        const response = await this.apiCommentCategoriesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
