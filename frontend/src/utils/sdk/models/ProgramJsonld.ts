/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProgramJsonld
 */
export interface ProgramJsonld {
    /**
     * 
     * @type {any}
     * @memberof ProgramJsonld
     */
    readonly id?: any | null;
    /**
     * 
     * @type {any}
     * @memberof ProgramJsonld
     */
    readonly type?: any | null;
    /**
     * 
     * @type {any}
     * @memberof ProgramJsonld
     */
    readonly context?: any | null;
    /**
     * 
     * @type {any}
     * @memberof ProgramJsonld
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof ProgramJsonld
     */
    modules?: any | null;
}

/**
 * Check if a given object implements the ProgramJsonld interface.
 */
export function instanceOfProgramJsonld(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function ProgramJsonldFromJSON(json: any): ProgramJsonld {
    return ProgramJsonldFromJSONTyped(json, false);
}

export function ProgramJsonldFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProgramJsonld {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, '@id') ? undefined : json['@id'],
        'type': !exists(json, '@type') ? undefined : json['@type'],
        'context': !exists(json, '@context') ? undefined : json['@context'],
        'name': json['name'],
        'modules': !exists(json, 'modules') ? undefined : json['modules'],
    };
}

export function ProgramJsonldToJSON(value?: ProgramJsonld | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'modules': value.modules,
    };
}

