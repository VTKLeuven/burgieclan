/* tslint:disable */
/* eslint-disable */
/**
 * Burgieclan API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CourseJsonld
 */
export interface CourseJsonld {
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    readonly id?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    readonly type?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    readonly context?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    code: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    professors?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    semesters?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    credits?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    oldCourses?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    newCourses?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    modules?: any | null;
    /**
     * 
     * @type {any}
     * @memberof CourseJsonld
     */
    courseComments?: any | null;
}

/**
 * Check if a given object implements the CourseJsonld interface.
 */
export function instanceOfCourseJsonld(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "code" in value;

    return isInstance;
}

export function CourseJsonldFromJSON(json: any): CourseJsonld {
    return CourseJsonldFromJSONTyped(json, false);
}

export function CourseJsonldFromJSONTyped(json: any, ignoreDiscriminator: boolean): CourseJsonld {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, '@id') ? undefined : json['@id'],
        'type': !exists(json, '@type') ? undefined : json['@type'],
        'context': !exists(json, '@context') ? undefined : json['@context'],
        'name': json['name'],
        'code': json['code'],
        'professors': !exists(json, 'professors') ? undefined : json['professors'],
        'semesters': !exists(json, 'semesters') ? undefined : json['semesters'],
        'credits': !exists(json, 'credits') ? undefined : json['credits'],
        'oldCourses': !exists(json, 'oldCourses') ? undefined : json['oldCourses'],
        'newCourses': !exists(json, 'newCourses') ? undefined : json['newCourses'],
        'modules': !exists(json, 'modules') ? undefined : json['modules'],
        'courseComments': !exists(json, 'courseComments') ? undefined : json['courseComments'],
    };
}

export function CourseJsonldToJSON(value?: CourseJsonld | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'code': value.code,
        'professors': value.professors,
        'semesters': value.semesters,
        'credits': value.credits,
        'oldCourses': value.oldCourses,
        'newCourses': value.newCourses,
        'modules': value.modules,
        'courseComments': value.courseComments,
    };
}

