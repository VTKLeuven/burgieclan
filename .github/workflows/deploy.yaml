name: "Deploy to test"

on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  git_pull:
    name: Git pull
    runs-on: ubuntu-latest
    outputs:
      release_timestamp: ${{ steps.set-timestamp.outputs.timestamp }}

    steps:
      - name: Install ssh keys
        # check this thread to understand why its needed:
        # https://stackoverflow.com/a/70447517
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: Connect and fetch
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.WORK_DIR }} && git fetch && git reset --hard origin/test"

      # Create shared timestamp for both jobs
      - name: Create release timestamp
        id: set-timestamp
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

  deploy_backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: git_pull
    steps:
      - name: Install ssh keys
        # check this thread to understand why its needed:
        # https://stackoverflow.com/a/70447517
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      # Prepare new release in a separate directory
      - name: Backend - Prepare new release
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "RELEASE_DIR=${{ secrets.DEPLOY_PATH }}/backend/releases/${{ needs.git_pull.outputs.release_timestamp }} && \
          mkdir -p \$RELEASE_DIR && \
          cp -r ${{ secrets.WORK_DIR_BACKEND }}/* \$RELEASE_DIR/ && \
          # Copy environment file properly
          if [ -f ${{ secrets.WORK_DIR_BACKEND }}/.env.local.php ]; then \
            cp ${{ secrets.WORK_DIR_BACKEND }}/.env.local.php \$RELEASE_DIR/ ; \
          fi && \
          cd \$RELEASE_DIR && \
          composer install --no-dev --optimize-autoloader && \
          bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration && \
          bin/console cache:clear --env=prod && \
          bin/console cache:warmup --env=prod"
      # Switch to new release with minimal downtime
      - name: Backend - Switch to new release
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "RELEASE_DIR=${{ secrets.DEPLOY_PATH }}/backend/releases/${{ needs.git_pull.outputs.release_timestamp }} && \
          ln -sfn \$RELEASE_DIR ${{ secrets.DEPLOY_PATH }}/backend/current && \
          sudo systemctl reload php8.1-fpm"
      # Cleanup old releases keeping last 5
      - name: Cleanup old backend releases
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.DEPLOY_PATH }}/backend/releases && ls -t | tail -n +6 | xargs rm -rf"

  deploy_frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: git_pull
    steps:
      - name: Install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      # Build in a temporary directory
      - name: Frontend - Prepare new release
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "RELEASE_DIR=${{ secrets.DEPLOY_PATH }}/frontend/releases/${{ needs.git_pull.outputs.release_timestamp }} && \
          mkdir -p \$RELEASE_DIR && \
          cp -r ${{ secrets.WORK_DIR_FRONTEND }}/* \$RELEASE_DIR/ && \
          # Copy environment file properly
          if [ -f ${{ secrets.WORK_DIR_FRONTEND }}/.env.local ]; then \
            cp ${{ secrets.WORK_DIR_FRONTEND }}/.env.local \$RELEASE_DIR/ ; \
          fi && \
          cd \$RELEASE_DIR && \
          export NVM_DIR=~/.nvm && \
          source ~/.nvm/nvm.sh && \
          npm install && \
          npm run build"
      # Switch to new release with zero-downtime using pm2
      - name: Frontend - Switch to new release
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "RELEASE_DIR=${{ secrets.DEPLOY_PATH }}/frontend/releases/${{ needs.git_pull.outputs.release_timestamp }} && \
          ln -sfn \$RELEASE_DIR ${{ secrets.DEPLOY_PATH }}/frontend/current && \
          export NVM_DIR=~/.nvm && \
          source ~/.nvm/nvm.sh && \
          pm2 reload ${{ secrets.FRONTEND_PM2_APP_NAME }} --update-env"
      # Cleanup old releases keeping last 5
      - name: Cleanup old releases
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.DEPLOY_PATH }}/frontend/releases && ls -t | tail -n +6 | xargs rm -rf"

  cleanup:
    name: Clean up
    runs-on: ubuntu-latest
    needs:
      - deploy_frontend
      - deploy_backend
    steps:
      - name: Cleanup
        run: rm -rf ~/.ssh
